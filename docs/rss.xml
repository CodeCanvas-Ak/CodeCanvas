<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>凯尔的代码烹饪室</title><link>https://KKKadk.github.io/CodeCanvas</link><description>  编程不仅仅是一门技术，更是一种生活方式。让我们一起在这个充满无限可能的数字世界中，开启属于我们的奇幻冒险吧！</description><copyright>凯尔的代码烹饪室</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://s2.loli.net/2024/06/25/O4IvSmryKx8cXqT.jpg</url><title>avatar</title><link>https://KKKadk.github.io/CodeCanvas</link></image><lastBuildDate>Thu, 29 Aug 2024 16:26:18 +0000</lastBuildDate><managingEditor>凯尔的代码烹饪室</managingEditor><ttl>60</ttl><webMaster>凯尔的代码烹饪室</webMaster><item><title>CS50P 2 Loops</title><link>https://KKKadk.github.io/CodeCanvas/post/CS50P%202%20Loops.html</link><description>### Loops(循环）&#13;
- 今天，我们来学习循环语句，简单来说就是一遍又一遍的做某一件事.&#13;
比如如果我们想在屏幕上打印出三个猫叫的语句，我们可如下代码所示实现：&#13;
```python &#13;
print('meow')&#13;
print('meow')&#13;
print('meow')&#13;
```&#13;
_这是在次数少的情况下，如果我们想不停的输出几百次甚至几万次，那我们还要手动去敲击实现吗？(那可真是个灾难!)_&#13;
- 而循环恰恰就能为我们实现重复一遍又一遍实现的代码块&#13;
&#13;
1. While 循环&#13;
```python &#13;
i=3&#13;
while i!=0&#13;
     print('meow')&#13;
```&#13;
我们运行上述代码会发现，这似乎是个永无止境的死循环？因此我们要在代码块中加入能改变循环条件的代码&#13;
```python &#13;
i=3&#13;
while i!=0&#13;
     print('meow')&#13;
     i=i-1#当然，我们也可以'偷懒'写为i-=1&#13;
```&#13;
- 现在我们的代码可以正常执行，每次通过循环的“迭代”都会减少 i .&#13;
&#13;
- 也由于我们编程习惯用0开始计数，因此上述代码通常写为： &#13;
```python &#13;
i = 0&#13;
while i &lt; 3:&#13;
    print('meow')&#13;
    i += 1&#13;
```&#13;
此时的代码流程如下图所示：&#13;
&lt;img width='463' alt='屏幕截图 2024-07-02 183352' src='https://github.com/KKKadk/AD-forever.github.io/assets/162538427/17353dbb-cf60-47e0-93a8-3b5f8249dbfb'&gt;&#13;
- 接下来我们来学习'大名鼎鼎'的for循环&#13;
为了更好的理解for循环，我们先来学习python中的列表list，就好像我们生活中的其他领域一样，我们可以有一个购物清单，一个代办事项等.&#13;
我们可通过for循环来遍历list中的个体：&#13;
```python&#13;
for i in [0,1,2]:#i依次取值为0，1，2&#13;
     print('meow')&#13;
```&#13;
但又如开头提到的问题，当我们的循环次数越来越多时，我们不可能一个个的手动输入列表里的所有内容，因此我们可以改进代码为：&#13;
```python &#13;
    for i in range(3):&#13;
      print('meow')&#13;
```&#13;
- 你可能注意到了，我们不在代码中显式的用到变量“i”，只用来存储循环的迭代次数，不用于其他任何目的.类似的,在Python中，如果这样的变量在我们的代码中没有任何其他意义，我们可以简单的将这个变量表示为单个下划线“_'因此，我们可以如下修改代码：&#13;
```python &#13;
   for _ in range(3):&#13;
     print('meow')&#13;
```&#13;
为了更深入的了解python，我们可以进一步改写上述代码：&#13;
```python &#13;
print('meow'*3)#是的，你没有看错，这就会连续输出三次meow&#13;
```&#13;
但你会注意到程序会产生'meowmeowmeow'的结果，这并不是我们所想要的效果，回想一下我们刚开始学习print函数时的参数列表，我们可以按如下方式所改写：&#13;
```python &#13;
print('meow\n'*3,end='')&#13;
```&#13;
- 现在我们可以用循环语句引导用户进行正确的输入了！顺便引出我们的两个新的关键字'continue'和“break”&#13;
```python&#13;
while True：&#13;
     n=int(input(What`s n?')&#13;
     if  n&lt;0:&#13;
       continue#当不满足我们想要的结果时，一直迭代下去&#13;
     else:&#13;
        break #退出循环，执行程序剩下的部分&#13;
```&#13;
- 现在我们可以运用这些知识，用函数来改进上述代码：&#13;
```python&#13;
def main():&#13;
      meow(get_number())#我们可以用一个函数的返回值作为另一个函数的参数值&#13;
&#13;
def get_number():&#13;
    while True:&#13;
       n=int(input(What`s n?')&#13;
      if n&gt;0：&#13;
         return n&#13;
&#13;
def meow(n):&#13;
   for _ in range(n):&#13;
     print('meow')&#13;
  &#13;
main()&#13;
```&#13;
-接下来的主题来重点来引申介绍**list**&#13;
```python&#13;
students= ['Hermonie','Harry','Ron']&#13;
&#13;
print(students[0])&#13;
print(student[1])&#13;
print(student[2])&#13;
#我们也可以用 for 循环来改写上述代码&#13;
students= ['Hermonie','Harry','Ron']&#13;
 for student in students:&#13;
    print(student)&#13;
```&#13;
&gt; [!NOTE]&#13;
&gt;请注意，对于students列表中的每个student，你可能会提出疑问，为什么我们没有使用前面讨论的“_'来代替student，因为student在我们的代码中显式使用了它.&#13;
&#13;
- 我们可以使用“len”函数来获得list的长度&#13;
我们用代码来输出学生姓名与列表中的位置：&#13;
```python &#13;
students=['Hermonie','Harry','Ron']&#13;
&#13;
for i in range(len(studens)):&#13;
    print(i+1,students[i])&#13;
```&#13;
- 最后，我们来学习Dictionaries（dict，一种数据结构，允许我们将键与值相关联）&#13;
- list 是多个值的列表，而dict 将键与值相关联&#13;
&lt;img width='529' alt='屏幕截图 2024-07-02 235008' src='https://github.com/KKKadk/AD-forever.github.io/assets/162538427/1b940593-ccba-4ad3-83e8-587e24ac60d6'&gt;&#13;
&#13;
&#13;
&#13;
如这样一个表格，我们可以用list来实现：&#13;
```python &#13;
students = ['Hermoine', 'Harry', 'Ron', 'Draco']&#13;
houses = ['Gryffindor', 'Gryffindor', 'Griffindor', 'Slytherin']&#13;
```&#13;
&#13;
- 请注意，我们可以保证我们将始终保持这些列表的顺序。</description><guid isPermaLink="true">https://KKKadk.github.io/CodeCanvas/post/CS50P%202%20Loops.html</guid><pubDate>Tue, 02 Jul 2024 16:17:04 +0000</pubDate></item><item><title>CS50P 1 Conditionals</title><link>https://KKKadk.github.io/CodeCanvas/post/CS50P%201%20Conditionals.html</link><description>**Conditionals**&#13;
 - 今天我们来学习条件语句，通过条件语句我们可以让程序在根据某些条件来实现选择.&#13;
 - Python内置了一些提出数学问题的'运算符'.&#13;
 - \&gt;和&lt; 符号对于我们来说比较熟悉.&#13;
 - \&gt;=表示'大于或等于'，初次看到这种表示形式你可能会诧异，但由于我们无法直接在键盘上打出一整个符号，所以得分开表示&#13;
 - \&gt;= 表示“大于或等于”。</description><guid isPermaLink="true">https://KKKadk.github.io/CodeCanvas/post/CS50P%201%20Conditionals.html</guid><pubDate>Mon, 01 Jul 2024 16:20:22 +0000</pubDate></item><item><title>CS50P 0</title><link>https://KKKadk.github.io/CodeCanvas/post/CS50P%200.html</link><description># 重续兴趣之烈火&#13;
## 梦开始的地方&#13;
  结束了懵懂的大一，不出意外的上学期的目标接着拖入了下学期，但至少一身轻，在暑假也以更稳定的目标所提升自己。</description><guid isPermaLink="true">https://KKKadk.github.io/CodeCanvas/post/CS50P%200.html</guid><pubDate>Thu, 27 Jun 2024 09:21:04 +0000</pubDate></item><item><title>开篇序章</title><link>https://KKKadk.github.io/CodeCanvas/post/kai-pian-xu-zhang.html</link><description>  大家好，我是一名计算机专业的大一新生，也是一个对编程充满好奇和热情的“小白”。</description><guid isPermaLink="true">https://KKKadk.github.io/CodeCanvas/post/kai-pian-xu-zhang.html</guid><pubDate>Tue, 25 Jun 2024 08:00:51 +0000</pubDate></item></channel></rss>